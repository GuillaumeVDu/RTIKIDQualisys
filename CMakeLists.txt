CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(IK_ID_RT)

SET(BOOST_MIN_VERSION "1.48.0")

SET(USE_GUI ON)

SET(QT5_HOME "C:/Qt/Qt5.10.0/5.10.0/msvc2013_64/") # Otherwise cannot find FindQT5.cmake

#SET(BOOST_LIBRARYDIR "C:/local/boost_1_66_0/lib64-msvc-12.0/")
#SET(Boost_INCLUDE_DIRS C:/local/boost_1_64_0/boost)
#SET(BOOST_ROOT C:/local/boost_1_64_0)
#SET(Boost_DIR C:/local/boost_1_64_0)

cmake_policy(SET CMP0020 NEW)

SET(COMPILE_CEINMS_PLUGIN ON)



SET(CMAKE_DEBUG_POSTFIX _d)

IF(NOT ENV{OPENSIM_HOME})
	MESSAGE("/!\\ OPENSIM_HOME not set /!\\ You must set OPENSIM_HOME")
ELSE()
	SET(OPENSIM_INSTALL_DIR $ENV{OPENSIM_HOME} 
		CACHE PATH "Top-level directory of OpenSim install")
ENDIF()

IF(NOT ENV{OPENSIM_HOME})
	SET(OPENSIM_INSTALL_DIR "C:/Users/Alejandro/Documents/OpenSim/OpenSim 3.3/OpenSim-3.3-source/OpenSim-install") # Path to  OpenSim
ENDIF()

#add_definitions(-DBOOST_DATE_TIME_POSIX_TIME_STD_CONFIG)
#SET(CMAKE_BUILD_TYPE Debug)
IF (UNIX)
	SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
	SET(CMAKE_CXX_FLAGS ${CMAKE_CSS_FLAGS} "-fPIC")
	SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR})
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

SET(OPENSIM_HEADERS_DIR ${OPENSIM_INSTALL_DIR}/sdk/include)
SET(OPENSIM_LIBS_DIR ${OPENSIM_INSTALL_DIR}/sdk/lib)
SET(OPENSIM_DLLS_DIR ${OPENSIM_INSTALL_DIR}/bin)
SET(SIMTK_HEADERS_DIR ${OPENSIM_INSTALL_DIR}/sdk/include/SimTK/include/)

IF(COMPILE_CEINMS_PLUGIN)
	SET(CEINMS_DIR "C:/Users/Alejandro/Documents/CEINMS-RT/")
	INCLUDE_DIRECTORIES(
		${CMAKE_SOURCE_DIR}/../../lib/Producers
		${CMAKE_SOURCE_DIR}/../../lib/Producers/FromExtDevice
		${CMAKE_SOURCE_DIR}/../../lib/Producers/FromFile
		${CMAKE_SOURCE_DIR}/../../lib/Producers/DevicePlugin
		${CMAKE_SOURCE_DIR}/../../lib/xmlInput
		${CMAKE_SOURCE_DIR}/../../lib/Producers/DevicePlugin/PluginHeritanceTemplate
	)
ENDIF()

IF(WIN32)
	SET(GLEW_HOME_DLL "C:/Users/Alejandro/Documents/glew-2.1.0-win32/glew-2.1.0/lib/Release/x64/")
	SET(GLEW_HOME "C:/Users/Alejandro/Documents/glew-2.1.0-win32/glew-2.1.0/lib/Release/x64/")
	INCLUDE_DIRECTORIES(
		${GLEW_HOME}/include
	)
	
	LINK_DIRECTORIES(
		${GLEW_HOME_DLL}
	)
	
	SET(GLEW_LIB glew32.dll)
	
	SET(GLUT_HOME_DLL "C:/Users/Alejandro/Documents/CEINMS-RT/freeglut/lib")
	SET(GLUT_HOME "C:/Users/Alejandro/Documents/CEINMS-RT/freeglut/lib")
	INCLUDE_DIRECTORIES	(
		${GLUT_HOME}/include
	)
	
	LINK_DIRECTORIES(
		${GLUT_HOME_DLL}
	)
	SET(GLUT_LIB freeglut.lib)
	
	SET(CMAKE_C_FLAGS "ws2_32.lib")
	SET(WINLIB ws2_32)
	SET(WINMM winmm)
ENDIF()

INCLUDE_DIRECTORIES(
	${OPENSIM_HEADERS_DIR}
	${SIMTK_HEADERS_DIR}
  	${CMAKE_SOURCE_DIR}/include
  	${CMAKE_SOURCE_DIR}/include/QualisysSocket
  	${CMAKE_SOURCE_DIR}/src
  	${CMAKE_SOURCE_DIR}/src/executable/
  	${CMAKE_SOURCE_DIR}/src/plugin
  	${CMAKE_SOURCE_DIR}/src/QualisysSocket
  	${CMAKE_SOURCE_DIR}/gui
  	${CMAKE_SOURCE_DIR}/gui/opengl
  	${CMAKE_SOURCE_DIR}/FileIO
  	${CMAKE_SOURCE_DIR}/build/gui
)

LINK_DIRECTORIES(
	${OPENSIM_LIBS_DIR}
	${OPENSIM_DLLS_DIR}
	${CMAKE_SOURCE_DIR}/lib
)

SET(Qt5Core_DIR ${QT5_HOME}/lib/cmake/Qt5Core)
SET(Qt5Gui_DIR ${QT5_HOME}/lib/cmake/Qt5Gui)
SET(Qt5OpenGL_DIR ${QT5_HOME}/lib/cmake/Qt5OpenGL)
SET(Qt5Widgets_DIR ${QT5_HOME}/lib/cmake/Qt5Widgets)
SET(Qt5PrintSupport_DIR ${QT5_HOME}/lib/cmake/Qt5PrintSupport)
	
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Gui REQUIRED)
FIND_PACKAGE(Qt5OpenGL REQUIRED)
FIND_PACKAGE(Qt5PrintSupport REQUIRED)

		
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5PrintSupport_DIR})
SET(QT_LIBRARIES
	Qt5::Widgets
	Qt5::Core
	Qt5::Gui
	Qt5::OpenGL
	Qt5::PrintSupport
)

set(CMAKE_AUTOMOC ON)
#set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

FIND_PACKAGE(OpenGL REQUIRED)

FIND_PACKAGE(Threads)

SET(Boost_USE_STATIC_LIBS ON)

FIND_PACKAGE(Boost COMPONENTS timer filesystem program_options thread system REQUIRED)
LINK_DIRECTORIES( ${Boost_LIBRARY_DIRS} )
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})

FIND_PACKAGE(XSD REQUIRED)
INCLUDE_DIRECTORIES(${XSD_INCLUDE_DIR})

FIND_PACKAGE(XERCES REQUIRED)
INCLUDE_DIRECTORIES(${XERCES_INCLUDE_DIR})


ADD_SUBDIRECTORY(FileIO)
ADD_SUBDIRECTORY(gui)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(QualisysTest)
