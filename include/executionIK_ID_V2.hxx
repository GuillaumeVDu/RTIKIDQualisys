// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef EXECUTION_IK_ID_V2_HXX
#define EXECUTION_IK_ID_V2_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class MarkerType;
class CoeffListIK;
class FilterIK;
class Markers;
class IKMarkerType;
class ImuType;
class IKImuType;
class KalmanOptionType;
class KalmanType;
class IKOptionType;
class IKChoice;
class IKType;
class PlateForceBody;
class IDType;
class ExecutionIKType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class MarkerType: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // weight
  //
  typedef ::xml_schema::double_ weight_type;
  typedef ::xsd::cxx::tree::traits< weight_type, char, ::xsd::cxx::tree::schema_type::double_ > weight_traits;

  const weight_type&
  weight () const;

  weight_type&
  weight ();

  void
  weight (const weight_type& x);

  // Constructors.
  //
  MarkerType (const name_type&,
              const weight_type&);

  MarkerType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MarkerType (const MarkerType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MarkerType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MarkerType&
  operator= (const MarkerType& x);

  virtual 
  ~MarkerType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< weight_type > weight_;
};

class CoeffListIK: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >
{
  public:
  CoeffListIK ();

  CoeffListIK (size_type n, const ::xml_schema::double_& x);

  template < typename I >
  CoeffListIK (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (begin, end, this)
  {
  }

  CoeffListIK (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  CoeffListIK (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  CoeffListIK (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  CoeffListIK (const CoeffListIK& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual CoeffListIK*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~CoeffListIK ();
};

class FilterIK: public ::xml_schema::type
{
  public:
  // aCoeff
  //
  typedef ::CoeffListIK aCoeff_type;
  typedef ::xsd::cxx::tree::traits< aCoeff_type, char > aCoeff_traits;

  const aCoeff_type&
  aCoeff () const;

  aCoeff_type&
  aCoeff ();

  void
  aCoeff (const aCoeff_type& x);

  void
  aCoeff (::std::auto_ptr< aCoeff_type > p);

  // bCoeff
  //
  typedef ::CoeffListIK bCoeff_type;
  typedef ::xsd::cxx::tree::traits< bCoeff_type, char > bCoeff_traits;

  const bCoeff_type&
  bCoeff () const;

  bCoeff_type&
  bCoeff ();

  void
  bCoeff (const bCoeff_type& x);

  void
  bCoeff (::std::auto_ptr< bCoeff_type > p);

  // Constructors.
  //
  FilterIK (const aCoeff_type&,
            const bCoeff_type&);

  FilterIK (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  FilterIK (const FilterIK& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual FilterIK*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  FilterIK&
  operator= (const FilterIK& x);

  virtual 
  ~FilterIK ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< aCoeff_type > aCoeff_;
  ::xsd::cxx::tree::one< bCoeff_type > bCoeff_;
};

class Markers: public ::xml_schema::type
{
  public:
  // marker
  //
  typedef ::MarkerType marker_type;
  typedef ::xsd::cxx::tree::sequence< marker_type > marker_sequence;
  typedef marker_sequence::iterator marker_iterator;
  typedef marker_sequence::const_iterator marker_const_iterator;
  typedef ::xsd::cxx::tree::traits< marker_type, char > marker_traits;

  const marker_sequence&
  marker () const;

  marker_sequence&
  marker ();

  void
  marker (const marker_sequence& s);

  // Constructors.
  //
  Markers ();

  Markers (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Markers (const Markers& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Markers*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Markers&
  operator= (const Markers& x);

  virtual 
  ~Markers ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  marker_sequence marker_;
};

class IKMarkerType: public ::xml_schema::type
{
  public:
  // lpFilterMarker
  //
  typedef ::FilterIK lpFilterMarker_type;
  typedef ::xsd::cxx::tree::traits< lpFilterMarker_type, char > lpFilterMarker_traits;

  const lpFilterMarker_type&
  lpFilterMarker () const;

  lpFilterMarker_type&
  lpFilterMarker ();

  void
  lpFilterMarker (const lpFilterMarker_type& x);

  void
  lpFilterMarker (::std::auto_ptr< lpFilterMarker_type > p);

  // maxError
  //
  typedef ::xml_schema::double_ maxError_type;
  typedef ::xsd::cxx::tree::optional< maxError_type > maxError_optional;
  typedef ::xsd::cxx::tree::traits< maxError_type, char, ::xsd::cxx::tree::schema_type::double_ > maxError_traits;

  const maxError_optional&
  maxError () const;

  maxError_optional&
  maxError ();

  void
  maxError (const maxError_type& x);

  void
  maxError (const maxError_optional& x);

  static maxError_type
  maxError_default_value ();

  // markersList
  //
  typedef ::Markers markersList_type;
  typedef ::xsd::cxx::tree::traits< markersList_type, char > markersList_traits;

  const markersList_type&
  markersList () const;

  markersList_type&
  markersList ();

  void
  markersList (const markersList_type& x);

  void
  markersList (::std::auto_ptr< markersList_type > p);

  // Constructors.
  //
  IKMarkerType (const lpFilterMarker_type&,
                const markersList_type&);

  IKMarkerType (::std::auto_ptr< lpFilterMarker_type >,
                ::std::auto_ptr< markersList_type >);

  IKMarkerType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  IKMarkerType (const IKMarkerType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual IKMarkerType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  IKMarkerType&
  operator= (const IKMarkerType& x);

  virtual 
  ~IKMarkerType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< lpFilterMarker_type > lpFilterMarker_;
  maxError_optional maxError_;
  ::xsd::cxx::tree::one< markersList_type > markersList_;
};

class ImuType: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // body
  //
  typedef ::xml_schema::string body_type;
  typedef ::xsd::cxx::tree::traits< body_type, char > body_traits;

  const body_type&
  body () const;

  body_type&
  body ();

  void
  body (const body_type& x);

  void
  body (::std::auto_ptr< body_type > p);

  // Constructors.
  //
  ImuType (const name_type&,
           const body_type&);

  ImuType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  ImuType (const ImuType& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual ImuType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ImuType&
  operator= (const ImuType& x);

  virtual 
  ~ImuType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< body_type > body_;
};

class IKImuType: public ::xml_schema::type
{
  public:
  // imu
  //
  typedef ::ImuType imu_type;
  typedef ::xsd::cxx::tree::sequence< imu_type > imu_sequence;
  typedef imu_sequence::iterator imu_iterator;
  typedef imu_sequence::const_iterator imu_const_iterator;
  typedef ::xsd::cxx::tree::traits< imu_type, char > imu_traits;

  const imu_sequence&
  imu () const;

  imu_sequence&
  imu ();

  void
  imu (const imu_sequence& s);

  // Constructors.
  //
  IKImuType ();

  IKImuType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  IKImuType (const IKImuType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual IKImuType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  IKImuType&
  operator= (const IKImuType& x);

  virtual 
  ~IKImuType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  imu_sequence imu_;
};

class KalmanOptionType: public ::xml_schema::type
{
  public:
  // p
  //
  typedef ::xml_schema::double_ p_type;
  typedef ::xsd::cxx::tree::optional< p_type > p_optional;
  typedef ::xsd::cxx::tree::traits< p_type, char, ::xsd::cxx::tree::schema_type::double_ > p_traits;

  const p_optional&
  p () const;

  p_optional&
  p ();

  void
  p (const p_type& x);

  void
  p (const p_optional& x);

  static p_type
  p_default_value ();

  // r
  //
  typedef ::xml_schema::double_ r_type;
  typedef ::xsd::cxx::tree::optional< r_type > r_optional;
  typedef ::xsd::cxx::tree::traits< r_type, char, ::xsd::cxx::tree::schema_type::double_ > r_traits;

  const r_optional&
  r () const;

  r_optional&
  r ();

  void
  r (const r_type& x);

  void
  r (const r_optional& x);

  static r_type
  r_default_value ();

  // sigma_da
  //
  typedef ::xml_schema::double_ sigma_da_type;
  typedef ::xsd::cxx::tree::optional< sigma_da_type > sigma_da_optional;
  typedef ::xsd::cxx::tree::traits< sigma_da_type, char, ::xsd::cxx::tree::schema_type::double_ > sigma_da_traits;

  const sigma_da_optional&
  sigma_da () const;

  sigma_da_optional&
  sigma_da ();

  void
  sigma_da (const sigma_da_type& x);

  void
  sigma_da (const sigma_da_optional& x);

  static sigma_da_type
  sigma_da_default_value ();

  // dt
  //
  typedef ::xml_schema::double_ dt_type;
  typedef ::xsd::cxx::tree::traits< dt_type, char, ::xsd::cxx::tree::schema_type::double_ > dt_traits;

  const dt_type&
  dt () const;

  dt_type&
  dt ();

  void
  dt (const dt_type& x);

  // Constructors.
  //
  KalmanOptionType (const dt_type&);

  KalmanOptionType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  KalmanOptionType (const KalmanOptionType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual KalmanOptionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  KalmanOptionType&
  operator= (const KalmanOptionType& x);

  virtual 
  ~KalmanOptionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  p_optional p_;
  r_optional r_;
  sigma_da_optional sigma_da_;
  ::xsd::cxx::tree::one< dt_type > dt_;
};

class KalmanType: public ::xml_schema::type
{
  public:
  // use
  //
  typedef ::xml_schema::boolean use_type;
  typedef ::xsd::cxx::tree::optional< use_type > use_optional;
  typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

  const use_optional&
  use () const;

  use_optional&
  use ();

  void
  use (const use_type& x);

  void
  use (const use_optional& x);

  static use_type
  use_default_value ();

  // kalmanOption
  //
  typedef ::KalmanOptionType kalmanOption_type;
  typedef ::xsd::cxx::tree::traits< kalmanOption_type, char > kalmanOption_traits;

  const kalmanOption_type&
  kalmanOption () const;

  kalmanOption_type&
  kalmanOption ();

  void
  kalmanOption (const kalmanOption_type& x);

  void
  kalmanOption (::std::auto_ptr< kalmanOption_type > p);

  // Constructors.
  //
  KalmanType (const kalmanOption_type&);

  KalmanType (::std::auto_ptr< kalmanOption_type >);

  KalmanType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  KalmanType (const KalmanType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual KalmanType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  KalmanType&
  operator= (const KalmanType& x);

  virtual 
  ~KalmanType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  use_optional use_;
  ::xsd::cxx::tree::one< kalmanOption_type > kalmanOption_;
};

class IKOptionType: public ::xml_schema::type
{
  public:
  // numberOfThread
  //
  typedef ::xml_schema::integer numberOfThread_type;
  typedef ::xsd::cxx::tree::optional< numberOfThread_type > numberOfThread_optional;
  typedef ::xsd::cxx::tree::traits< numberOfThread_type, char > numberOfThread_traits;

  const numberOfThread_optional&
  numberOfThread () const;

  numberOfThread_optional&
  numberOfThread ();

  void
  numberOfThread (const numberOfThread_type& x);

  void
  numberOfThread (const numberOfThread_optional& x);

  static numberOfThread_type
  numberOfThread_default_value ();

  // enforceIKConstraintUse
  //
  typedef ::xml_schema::boolean enforceIKConstraintUse_type;
  typedef ::xsd::cxx::tree::optional< enforceIKConstraintUse_type > enforceIKConstraintUse_optional;
  typedef ::xsd::cxx::tree::traits< enforceIKConstraintUse_type, char > enforceIKConstraintUse_traits;

  const enforceIKConstraintUse_optional&
  enforceIKConstraintUse () const;

  enforceIKConstraintUse_optional&
  enforceIKConstraintUse ();

  void
  enforceIKConstraintUse (const enforceIKConstraintUse_type& x);

  void
  enforceIKConstraintUse (const enforceIKConstraintUse_optional& x);

  static enforceIKConstraintUse_type
  enforceIKConstraintUse_default_value ();

  // kalman
  //
  typedef ::KalmanType kalman_type;
  typedef ::xsd::cxx::tree::traits< kalman_type, char > kalman_traits;

  const kalman_type&
  kalman () const;

  kalman_type&
  kalman ();

  void
  kalman (const kalman_type& x);

  void
  kalman (::std::auto_ptr< kalman_type > p);

  // Constructors.
  //
  IKOptionType (const kalman_type&);

  IKOptionType (::std::auto_ptr< kalman_type >);

  IKOptionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  IKOptionType (const IKOptionType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual IKOptionType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  IKOptionType&
  operator= (const IKOptionType& x);

  virtual 
  ~IKOptionType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  numberOfThread_optional numberOfThread_;
  enforceIKConstraintUse_optional enforceIKConstraintUse_;
  ::xsd::cxx::tree::one< kalman_type > kalman_;
};

class IKChoice: public ::xml_schema::type
{
  public:
  // imus
  //
  typedef ::IKImuType imus_type;
  typedef ::xsd::cxx::tree::optional< imus_type > imus_optional;
  typedef ::xsd::cxx::tree::traits< imus_type, char > imus_traits;

  const imus_optional&
  imus () const;

  imus_optional&
  imus ();

  void
  imus (const imus_type& x);

  void
  imus (const imus_optional& x);

  void
  imus (::std::auto_ptr< imus_type > p);

  // markers
  //
  typedef ::IKMarkerType markers_type;
  typedef ::xsd::cxx::tree::optional< markers_type > markers_optional;
  typedef ::xsd::cxx::tree::traits< markers_type, char > markers_traits;

  const markers_optional&
  markers () const;

  markers_optional&
  markers ();

  void
  markers (const markers_type& x);

  void
  markers (const markers_optional& x);

  void
  markers (::std::auto_ptr< markers_type > p);

  // Constructors.
  //
  IKChoice ();

  IKChoice (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  IKChoice (const IKChoice& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual IKChoice*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  IKChoice&
  operator= (const IKChoice& x);

  virtual 
  ~IKChoice ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  imus_optional imus_;
  markers_optional markers_;
};

class IKType: public ::xml_schema::type
{
  public:
  // ikOption
  //
  typedef ::IKOptionType ikOption_type;
  typedef ::xsd::cxx::tree::traits< ikOption_type, char > ikOption_traits;

  const ikOption_type&
  ikOption () const;

  ikOption_type&
  ikOption ();

  void
  ikOption (const ikOption_type& x);

  void
  ikOption (::std::auto_ptr< ikOption_type > p);

  // dataFrom
  //
  typedef ::IKChoice dataFrom_type;
  typedef ::xsd::cxx::tree::traits< dataFrom_type, char > dataFrom_traits;

  const dataFrom_type&
  dataFrom () const;

  dataFrom_type&
  dataFrom ();

  void
  dataFrom (const dataFrom_type& x);

  void
  dataFrom (::std::auto_ptr< dataFrom_type > p);

  // Constructors.
  //
  IKType (const ikOption_type&,
          const dataFrom_type&);

  IKType (::std::auto_ptr< ikOption_type >,
          ::std::auto_ptr< dataFrom_type >);

  IKType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  IKType (const IKType& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual IKType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  IKType&
  operator= (const IKType& x);

  virtual 
  ~IKType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ikOption_type > ikOption_;
  ::xsd::cxx::tree::one< dataFrom_type > dataFrom_;
};

class PlateForceBody: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  PlateForceBody ();

  PlateForceBody (size_type n, const ::xml_schema::string& x);

  template < typename I >
  PlateForceBody (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  PlateForceBody (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PlateForceBody (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PlateForceBody (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PlateForceBody (const PlateForceBody& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual PlateForceBody*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~PlateForceBody ();
};

class IDType: public ::xml_schema::type
{
  public:
  // use
  //
  typedef ::xml_schema::boolean use_type;
  typedef ::xsd::cxx::tree::optional< use_type > use_optional;
  typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

  const use_optional&
  use () const;

  use_optional&
  use ();

  void
  use (const use_type& x);

  void
  use (const use_optional& x);

  static use_type
  use_default_value ();

  // lpFilterGRF
  //
  typedef ::FilterIK lpFilterGRF_type;
  typedef ::xsd::cxx::tree::traits< lpFilterGRF_type, char > lpFilterGRF_traits;

  const lpFilterGRF_type&
  lpFilterGRF () const;

  lpFilterGRF_type&
  lpFilterGRF ();

  void
  lpFilterGRF (const lpFilterGRF_type& x);

  void
  lpFilterGRF (::std::auto_ptr< lpFilterGRF_type > p);

  // plateForceBody
  //
  typedef ::PlateForceBody plateForceBody_type;
  typedef ::xsd::cxx::tree::traits< plateForceBody_type, char > plateForceBody_traits;

  const plateForceBody_type&
  plateForceBody () const;

  plateForceBody_type&
  plateForceBody ();

  void
  plateForceBody (const plateForceBody_type& x);

  void
  plateForceBody (::std::auto_ptr< plateForceBody_type > p);

  // Constructors.
  //
  IDType (const lpFilterGRF_type&,
          const plateForceBody_type&);

  IDType (::std::auto_ptr< lpFilterGRF_type >,
          const plateForceBody_type&);

  IDType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  IDType (const IDType& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual IDType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  IDType&
  operator= (const IDType& x);

  virtual 
  ~IDType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  use_optional use_;
  ::xsd::cxx::tree::one< lpFilterGRF_type > lpFilterGRF_;
  ::xsd::cxx::tree::one< plateForceBody_type > plateForceBody_;
};

class ExecutionIKType: public ::xml_schema::type
{
  public:
  // ik
  //
  typedef ::IKType ik_type;
  typedef ::xsd::cxx::tree::traits< ik_type, char > ik_traits;

  const ik_type&
  ik () const;

  ik_type&
  ik ();

  void
  ik (const ik_type& x);

  void
  ik (::std::auto_ptr< ik_type > p);

  // id
  //
  typedef ::IDType id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // OsimFile
  //
  typedef ::xml_schema::string OsimFile_type;
  typedef ::xsd::cxx::tree::traits< OsimFile_type, char > OsimFile_traits;

  const OsimFile_type&
  OsimFile () const;

  OsimFile_type&
  OsimFile ();

  void
  OsimFile (const OsimFile_type& x);

  void
  OsimFile (::std::auto_ptr< OsimFile_type > p);

  // LabFile
  //
  typedef ::xml_schema::string LabFile_type;
  typedef ::xsd::cxx::tree::traits< LabFile_type, char > LabFile_traits;

  const LabFile_type&
  LabFile () const;

  LabFile_type&
  LabFile ();

  void
  LabFile (const LabFile_type& x);

  void
  LabFile (::std::auto_ptr< LabFile_type > p);

  // TranslateFile
  //
  typedef ::xml_schema::string TranslateFile_type;
  typedef ::xsd::cxx::tree::traits< TranslateFile_type, char > TranslateFile_traits;

  const TranslateFile_type&
  TranslateFile () const;

  TranslateFile_type&
  TranslateFile ();

  void
  TranslateFile (const TranslateFile_type& x);

  void
  TranslateFile (::std::auto_ptr< TranslateFile_type > p);

  // ip
  //
  typedef ::xml_schema::string ip_type;
  typedef ::xsd::cxx::tree::traits< ip_type, char > ip_traits;

  const ip_type&
  ip () const;

  ip_type&
  ip ();

  void
  ip (const ip_type& x);

  void
  ip (::std::auto_ptr< ip_type > p);

  // port
  //
  typedef ::xml_schema::int_ port_type;
  typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

  const port_type&
  port () const;

  port_type&
  port ();

  void
  port (const port_type& x);

  // Constructors.
  //
  ExecutionIKType (const ik_type&,
                   const id_type&,
                   const OsimFile_type&,
                   const LabFile_type&,
                   const TranslateFile_type&,
                   const ip_type&,
                   const port_type&);

  ExecutionIKType (::std::auto_ptr< ik_type >,
                   ::std::auto_ptr< id_type >,
                   const OsimFile_type&,
                   const LabFile_type&,
                   const TranslateFile_type&,
                   const ip_type&,
                   const port_type&);

  ExecutionIKType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  ExecutionIKType (const ExecutionIKType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual ExecutionIKType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ExecutionIKType&
  operator= (const ExecutionIKType& x);

  virtual 
  ~ExecutionIKType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ik_type > ik_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< OsimFile_type > OsimFile_;
  ::xsd::cxx::tree::one< LabFile_type > LabFile_;
  ::xsd::cxx::tree::one< TranslateFile_type > TranslateFile_;
  ::xsd::cxx::tree::one< ip_type > ip_;
  ::xsd::cxx::tree::one< port_type > port_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::ExecutionIKType >
executionIK (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ExecutionIKType >
executionIK (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ExecutionIKType >
executionIK (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ExecutionIKType >
executionIK (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ExecutionIKType >
executionIK (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EXECUTION_IK_ID_V2_HXX
