// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef LABORATORY_HXX
#define LABORATORY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class RotationType;
class ForcePlateToGlobalRotations;
class ForcePlatformOrigin;
class ForcePlatformType;
class ForcePlatformsType;
class LaboratoryType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class RotationType: public ::xml_schema::type
{
  public:
  // Axis
  //
  typedef ::xml_schema::string Axis_type;
  typedef ::xsd::cxx::tree::traits< Axis_type, char > Axis_traits;

  const Axis_type&
  Axis () const;

  Axis_type&
  Axis ();

  void
  Axis (const Axis_type& x);

  void
  Axis (::std::auto_ptr< Axis_type > p);

  // Degrees
  //
  typedef ::xml_schema::double_ Degrees_type;
  typedef ::xsd::cxx::tree::traits< Degrees_type, char, ::xsd::cxx::tree::schema_type::double_ > Degrees_traits;

  const Degrees_type&
  Degrees () const;

  Degrees_type&
  Degrees ();

  void
  Degrees (const Degrees_type& x);

  // Constructors.
  //
  RotationType (const Axis_type&,
                const Degrees_type&);

  RotationType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  RotationType (const RotationType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual RotationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RotationType&
  operator= (const RotationType& x);

  virtual 
  ~RotationType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Axis_type > Axis_;
  ::xsd::cxx::tree::one< Degrees_type > Degrees_;
};

class ForcePlateToGlobalRotations: public ::xml_schema::type
{
  public:
  // Rot
  //
  typedef ::RotationType Rot_type;
  typedef ::xsd::cxx::tree::sequence< Rot_type > Rot_sequence;
  typedef Rot_sequence::iterator Rot_iterator;
  typedef Rot_sequence::const_iterator Rot_const_iterator;
  typedef ::xsd::cxx::tree::traits< Rot_type, char > Rot_traits;

  const Rot_sequence&
  Rot () const;

  Rot_sequence&
  Rot ();

  void
  Rot (const Rot_sequence& s);

  // Constructors.
  //
  ForcePlateToGlobalRotations ();

  ForcePlateToGlobalRotations (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  ForcePlateToGlobalRotations (const ForcePlateToGlobalRotations& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual ForcePlateToGlobalRotations*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ForcePlateToGlobalRotations&
  operator= (const ForcePlateToGlobalRotations& x);

  virtual 
  ~ForcePlateToGlobalRotations ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Rot_sequence Rot_;
};

class ForcePlatformOrigin: public ::xml_schema::type
{
  public:
  // x
  //
  typedef ::xml_schema::double_ x_type;
  typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::double_ > x_traits;

  const x_type&
  x () const;

  x_type&
  x ();

  void
  x (const x_type& x);

  // y
  //
  typedef ::xml_schema::double_ y_type;
  typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::double_ > y_traits;

  const y_type&
  y () const;

  y_type&
  y ();

  void
  y (const y_type& x);

  // z
  //
  typedef ::xml_schema::double_ z_type;
  typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::double_ > z_traits;

  const z_type&
  z () const;

  z_type&
  z ();

  void
  z (const z_type& x);

  // Constructors.
  //
  ForcePlatformOrigin (const x_type&,
                       const y_type&,
                       const z_type&);

  ForcePlatformOrigin (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  ForcePlatformOrigin (const ForcePlatformOrigin& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual ForcePlatformOrigin*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ForcePlatformOrigin&
  operator= (const ForcePlatformOrigin& x);

  virtual 
  ~ForcePlatformOrigin ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< x_type > x_;
  ::xsd::cxx::tree::one< y_type > y_;
  ::xsd::cxx::tree::one< z_type > z_;
};

class ForcePlatformType: public ::xml_schema::type
{
  public:
  // ID
  //
  typedef ::xml_schema::integer ID_type;
  typedef ::xsd::cxx::tree::traits< ID_type, char > ID_traits;

  const ID_type&
  ID () const;

  ID_type&
  ID ();

  void
  ID (const ID_type& x);

  // Brand
  //
  typedef ::xml_schema::string Brand_type;
  typedef ::xsd::cxx::tree::traits< Brand_type, char > Brand_traits;

  const Brand_type&
  Brand () const;

  Brand_type&
  Brand ();

  void
  Brand (const Brand_type& x);

  void
  Brand (::std::auto_ptr< Brand_type > p);

  // Type
  //
  typedef ::xml_schema::integer Type_type;
  typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

  const Type_type&
  Type () const;

  Type_type&
  Type ();

  void
  Type (const Type_type& x);

  // FrameRate
  //
  typedef ::xml_schema::double_ FrameRate_type;
  typedef ::xsd::cxx::tree::traits< FrameRate_type, char, ::xsd::cxx::tree::schema_type::double_ > FrameRate_traits;

  const FrameRate_type&
  FrameRate () const;

  FrameRate_type&
  FrameRate ();

  void
  FrameRate (const FrameRate_type& x);

  // FPtoGlobalRotations
  //
  typedef ::ForcePlateToGlobalRotations FPtoGlobalRotations_type;
  typedef ::xsd::cxx::tree::traits< FPtoGlobalRotations_type, char > FPtoGlobalRotations_traits;

  const FPtoGlobalRotations_type&
  FPtoGlobalRotations () const;

  FPtoGlobalRotations_type&
  FPtoGlobalRotations ();

  void
  FPtoGlobalRotations (const FPtoGlobalRotations_type& x);

  void
  FPtoGlobalRotations (::std::auto_ptr< FPtoGlobalRotations_type > p);

  // origin
  //
  typedef ::ForcePlatformOrigin origin_type;
  typedef ::xsd::cxx::tree::traits< origin_type, char > origin_traits;

  const origin_type&
  origin () const;

  origin_type&
  origin ();

  void
  origin (const origin_type& x);

  void
  origin (::std::auto_ptr< origin_type > p);

  // originGlobal
  //
  typedef ::ForcePlatformOrigin originGlobal_type;
  typedef ::xsd::cxx::tree::traits< originGlobal_type, char > originGlobal_traits;

  const originGlobal_type&
  originGlobal () const;

  originGlobal_type&
  originGlobal ();

  void
  originGlobal (const originGlobal_type& x);

  void
  originGlobal (::std::auto_ptr< originGlobal_type > p);

  // Constructors.
  //
  ForcePlatformType (const ID_type&,
                     const Brand_type&,
                     const Type_type&,
                     const FrameRate_type&,
                     const FPtoGlobalRotations_type&,
                     const origin_type&,
                     const originGlobal_type&);

  ForcePlatformType (const ID_type&,
                     const Brand_type&,
                     const Type_type&,
                     const FrameRate_type&,
                     ::std::auto_ptr< FPtoGlobalRotations_type >,
                     ::std::auto_ptr< origin_type >,
                     ::std::auto_ptr< originGlobal_type >);

  ForcePlatformType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  ForcePlatformType (const ForcePlatformType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual ForcePlatformType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ForcePlatformType&
  operator= (const ForcePlatformType& x);

  virtual 
  ~ForcePlatformType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ID_type > ID_;
  ::xsd::cxx::tree::one< Brand_type > Brand_;
  ::xsd::cxx::tree::one< Type_type > Type_;
  ::xsd::cxx::tree::one< FrameRate_type > FrameRate_;
  ::xsd::cxx::tree::one< FPtoGlobalRotations_type > FPtoGlobalRotations_;
  ::xsd::cxx::tree::one< origin_type > origin_;
  ::xsd::cxx::tree::one< originGlobal_type > originGlobal_;
};

class ForcePlatformsType: public ::xml_schema::type
{
  public:
  // ForcePlatform
  //
  typedef ::ForcePlatformType ForcePlatform_type;
  typedef ::xsd::cxx::tree::sequence< ForcePlatform_type > ForcePlatform_sequence;
  typedef ForcePlatform_sequence::iterator ForcePlatform_iterator;
  typedef ForcePlatform_sequence::const_iterator ForcePlatform_const_iterator;
  typedef ::xsd::cxx::tree::traits< ForcePlatform_type, char > ForcePlatform_traits;

  const ForcePlatform_sequence&
  ForcePlatform () const;

  ForcePlatform_sequence&
  ForcePlatform ();

  void
  ForcePlatform (const ForcePlatform_sequence& s);

  // Constructors.
  //
  ForcePlatformsType ();

  ForcePlatformsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  ForcePlatformsType (const ForcePlatformsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual ForcePlatformsType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ForcePlatformsType&
  operator= (const ForcePlatformsType& x);

  virtual 
  ~ForcePlatformsType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ForcePlatform_sequence ForcePlatform_;
};

class LaboratoryType: public ::xml_schema::type
{
  public:
  // Name
  //
  typedef ::xml_schema::string Name_type;
  typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

  const Name_type&
  Name () const;

  Name_type&
  Name ();

  void
  Name (const Name_type& x);

  void
  Name (::std::auto_ptr< Name_type > p);

  static const Name_type&
  Name_default_value ();

  // MotionCaptureSystem
  //
  typedef ::xml_schema::string MotionCaptureSystem_type;
  typedef ::xsd::cxx::tree::traits< MotionCaptureSystem_type, char > MotionCaptureSystem_traits;

  const MotionCaptureSystem_type&
  MotionCaptureSystem () const;

  MotionCaptureSystem_type&
  MotionCaptureSystem ();

  void
  MotionCaptureSystem (const MotionCaptureSystem_type& x);

  void
  MotionCaptureSystem (::std::auto_ptr< MotionCaptureSystem_type > p);

  // CoordinateSystemOrientation
  //
  typedef ::xml_schema::string CoordinateSystemOrientation_type;
  typedef ::xsd::cxx::tree::traits< CoordinateSystemOrientation_type, char > CoordinateSystemOrientation_traits;

  const CoordinateSystemOrientation_type&
  CoordinateSystemOrientation () const;

  CoordinateSystemOrientation_type&
  CoordinateSystemOrientation ();

  void
  CoordinateSystemOrientation (const CoordinateSystemOrientation_type& x);

  void
  CoordinateSystemOrientation (::std::auto_ptr< CoordinateSystemOrientation_type > p);

  // NumberOfForcePlatforms
  //
  typedef ::xml_schema::integer NumberOfForcePlatforms_type;
  typedef ::xsd::cxx::tree::traits< NumberOfForcePlatforms_type, char > NumberOfForcePlatforms_traits;

  const NumberOfForcePlatforms_type&
  NumberOfForcePlatforms () const;

  NumberOfForcePlatforms_type&
  NumberOfForcePlatforms ();

  void
  NumberOfForcePlatforms (const NumberOfForcePlatforms_type& x);

  // ForcePlatformsList
  //
  typedef ::ForcePlatformsType ForcePlatformsList_type;
  typedef ::xsd::cxx::tree::sequence< ForcePlatformsList_type > ForcePlatformsList_sequence;
  typedef ForcePlatformsList_sequence::iterator ForcePlatformsList_iterator;
  typedef ForcePlatformsList_sequence::const_iterator ForcePlatformsList_const_iterator;
  typedef ::xsd::cxx::tree::traits< ForcePlatformsList_type, char > ForcePlatformsList_traits;

  const ForcePlatformsList_sequence&
  ForcePlatformsList () const;

  ForcePlatformsList_sequence&
  ForcePlatformsList ();

  void
  ForcePlatformsList (const ForcePlatformsList_sequence& s);

  // Constructors.
  //
  LaboratoryType (const Name_type&,
                  const MotionCaptureSystem_type&,
                  const CoordinateSystemOrientation_type&,
                  const NumberOfForcePlatforms_type&);

  LaboratoryType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  LaboratoryType (const LaboratoryType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual LaboratoryType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  LaboratoryType&
  operator= (const LaboratoryType& x);

  virtual 
  ~LaboratoryType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Name_type > Name_;
  static const Name_type Name_default_value_;
  ::xsd::cxx::tree::one< MotionCaptureSystem_type > MotionCaptureSystem_;
  ::xsd::cxx::tree::one< CoordinateSystemOrientation_type > CoordinateSystemOrientation_;
  ::xsd::cxx::tree::one< NumberOfForcePlatforms_type > NumberOfForcePlatforms_;
  ForcePlatformsList_sequence ForcePlatformsList_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::LaboratoryType >
Laboratory (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::LaboratoryType >
Laboratory (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::LaboratoryType >
Laboratory (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::LaboratoryType >
Laboratory (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::LaboratoryType >
Laboratory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // LABORATORY_HXX
